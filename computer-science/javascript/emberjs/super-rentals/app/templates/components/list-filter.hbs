<!--
  **************************************************************************
  *  02.09: Creating a Complex Component - Accepting Input to a Component  *
  **************************************************************************
  *  We want the component to simply provide an input field and yield the  *
  *  results list to its block, so our template will be simple:            *
  **************************************************************************
-->
{{input
  value=this.value
  key-up=(action "handleFilterEntry")
  class="light"
  placeholder="Filter By City"
}}
{{yield this.results}}
<!--
  **********************************************************************************
  *  The template contains an `{{input}}` helper that renders as a text field,     *
  *  in which the user can type a pattern to filter the list of cities used in     *
  *  a search. The `value` property of the `input` will be kept in sync with       *
  *  the `value` property in the component.                                        *
  **********************************************************************************
  *  Another way to say this is that the `value` property of `input` is bound      *
  *  to the `value` property of the component. If the property changes, either     *
  *  by the user typing in the input field, or by assigning a new value to it      *
  *  in our program, the new value of the property is present in both the          *
  *  rendered web page and in the code.                                            *
  **********************************************************************************
  *  The `key-up` property will be bound to the `handleFilterEntry` action.        *
  **********************************************************************************
  *  The `handleFilterEntry` action will apply the search term filter to the list  *
  *  of rentals, and set a component attribute called `results`. The `results`     *
  *  are passed to the `{{yield}}` helper in the template. In the yielded block    *
  *  component, those same `results` are referred to as `|filteredResults|`.       *
  **********************************************************************************
-->
